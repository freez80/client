box: golang:1.7

build:
  steps:
     # Store the original source dir so we can pass the file to deploy
    - script:
      name: provide chance for deployment
      code: |
        export ORG_SOURCE=$WERCKER_SOURCE_DIR

    - wercker/setup-go-workspace:
      package-dir: github.com/screwdriver-cd/client

    - wercker/golint

    # Installs the latest version of glide
    - script:
        name: Install latest version of glide
        code: curl https://glide.sh/get | sh

    # Install dependencies
    - script:
      name: Install Dependencies
      code: |
        cd $WERCKER_SOURCE_DIR
        glide install

    # Installs the master branch (latest) version of go-swagger
    - script:
        name: Install Swagger
        code: |
            cd vendor/github.com/go-swagger/go-swagger/cmd/swagger
            go install

    - script:
      name: Generate Code
      code: |
        cd $WERCKER_SOURCE_DIR
        swagger generate client swagger.json
 
    # Runs go test on all non-vendored directories
    - script:
      name: go test
      code: |
          go test $(glide novendor)

    - script:
      name: go build linux
      code: |
        env GOOS=linux GOOARCH=amd64 go build -a -o sd-linux
        mv sd-linux $ORG_SOURCE

    - script:
        name: go build osx
        code: |
          env GOOS=darwin GOOARCH=amd64 go build -a -o sd-mac
          mv sd-mac $ORG_SOURCE

    - script:
        name: go build windows
        code: |
          env GOOS=windows GOARCH=386 go build -a -o sd-windows
          mv sd-windows $ORG_SOURCE

deploy:
  steps:
    # Add our deploy key to SSH
    - add-ssh-key:
      keyname: GIT_KEY

    - install-packages:
        packages: openssh-client

    # Add GitHub's SSH fingerprint to SSH known_hosts
    - add-to-known_hosts:
      hostname: github.com
      fingerprint: 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48
      type: rsa

    - script:
        name: download git version
        code: |
          wget $(wget -q -O - https://api.github.com/repos/screwdriver-cd/gitversion/releases/latest \
            | awk '/browser_download_url/ { print $2 }' \
            | sed 's/"//g') \
            && chmod +x gitversion

    - script: 
        name: bump the version
        code: export VERSION=$(./gitversion --prefix v bump patch)

    - script:
        name: push newly added tag
        code: git push origin --tags

    - github-create-release:
        token: $GITHUB_TOKEN
        tag: $VERSION

    - github-upload-asset:
        token: $GITHUB_TOKEN
        file: sd-mac
        content_type: application/octet-stream

    - github-upload-asset:
        token: $GITHUB_TOKEN
        file: sd-linux
        content_type: application/octet-stream
